// Some copyright should be here...

using UnrealBuildTool;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;

public class PixelStreamingExt : ModuleRules
{
	string StagingDirectory = null;
	string WebServersOutputDirectory = null;

	private string GetStagingDirectory()
	{
		string ProjectDir = Path.GetDirectoryName(Target.ProjectFile.ToString());
		string GameIniFilePath = Path.Combine(ProjectDir, "saved/Config/WindowsEditor/Game.ini");

		if (!File.Exists(GameIniFilePath))
		{
			System.Console.WriteLine($"File not found: {GameIniFilePath}");
			return null;
		}
		else
		{
			System.Console.WriteLine($"File found: {GameIniFilePath}");
		}

		string[] lines = File.ReadAllLines(GameIniFilePath);
		foreach (string line in lines)
		{
			if (line.Contains("StagingDirectory="))
			{
				Match match = Regex.Match(line, "\"([^\"]*)\"");
 				if (match.Success)
				{
					return match.Groups[1].Value;
				}
				else
				{
					System.Console.WriteLine($"Match failure");
				}
				break;
			}
		}
		return null;
	}

	private bool IsExportWebServers()
	{
		string ProjectDir = Path.GetDirectoryName(Target.ProjectFile.ToString());
		string DefaultEngineIniFilePath = Path.Combine(ProjectDir, "Config/DefaultEngine.ini");

		if (!File.Exists(DefaultEngineIniFilePath))
		{
			System.Console.WriteLine($"File not found: {DefaultEngineIniFilePath}");
			return false;
		}
		else
		{
			System.Console.WriteLine($"File found: {DefaultEngineIniFilePath}");
		}

		string SectionName = "/Script/PixelStreamingExt.PixelStreamingExtEditorSettings";
		string KeyName = "bExportWebServers";
		string currentSection = null;
		string[] lines = File.ReadAllLines(DefaultEngineIniFilePath);
		foreach (string line in lines)
		{
			line.Trim();
			if (line.StartsWith("[") && line.EndsWith("]"))
			{
				currentSection = line.Substring(1, line.Length - 2).Trim();
				continue;
			}
			else if (currentSection != null && currentSection.Contains(SectionName))
			{
				if (line.StartsWith($"{KeyName}="))
				{
					string value = line.Substring(KeyName.Length + 1).Trim();
					if (value.Contains("true") || value.Contains("True") || value.Contains("TRUE"))
					{
						return true;
					}
					return false;
				}
			}
		}

		System.Console.WriteLine($"not found");
		return false;
	}

	private void AddFolder(string Folder)
	{
		string ProjectDir = Path.GetDirectoryName(Target.ProjectFile.ToString());
		System.Console.WriteLine($"Folder: {Folder}");
		string PixelStreamingExtProgramsDirectory = Path.Combine(ProjectDir, "Plugins/PixelStreamingExtEditor/Resources/WebServers");
		string DirectoryToAdd = new DirectoryInfo(Path.Combine(PixelStreamingExtProgramsDirectory, Folder)).FullName;

		if (!Directory.Exists(DirectoryToAdd))
		{
			System.Console.WriteLine($"Directory not found: {DirectoryToAdd}");
			return;
		}
		else
		{
			System.Console.WriteLine($"Directory found: {DirectoryToAdd}");
		}

		List<string> DependenciesToAdd = new List<string>();
		DependenciesToAdd.AddRange(Directory.GetFiles(DirectoryToAdd, "*.*", SearchOption.AllDirectories));

		List<string> PathsToIgnore = new List<string>();
		PathsToIgnore.Add(new DirectoryInfo(DirectoryToAdd + "/node_modules").FullName);
		PathsToIgnore.Add(new DirectoryInfo(DirectoryToAdd + "/implementations/typescript/node_modules").FullName);
		PathsToIgnore.Add(new DirectoryInfo(DirectoryToAdd + "/implementations/EpicGames/node_modules").FullName);
		PathsToIgnore.Add(new DirectoryInfo(DirectoryToAdd + "/implementations/react/node_modules").FullName);
		PathsToIgnore.Add(new DirectoryInfo(DirectoryToAdd + "/library/node_modules").FullName);
		PathsToIgnore.Add(new DirectoryInfo(DirectoryToAdd + "/ui-library/node_modules").FullName);
		PathsToIgnore.Add(new DirectoryInfo(DirectoryToAdd + "/logs").FullName);
		PathsToIgnore.Add(new DirectoryInfo(DirectoryToAdd + "/platform_scripts/cmd/node").FullName);
		PathsToIgnore.Add(new DirectoryInfo(DirectoryToAdd + "/platform_scripts/cmd/coturn").FullName);
		PathsToIgnore.Add(new DirectoryInfo(DirectoryToAdd + "/platform_scripts/bash/node").FullName);
		PathsToIgnore.Add(new DirectoryInfo(DirectoryToAdd + "/my-app/node_modules").FullName);

		// Go through each file/folder in the WebServers and selectively choose which ones we wish to package.
		foreach (var DependencySource in DependenciesToAdd)
		{
			// We want to skip packaging the above directories as they are all generated by running scripts
			bool bSkip = false;
			foreach (var PathToIgnore in PathsToIgnore)
			{
				if (DependencySource.StartsWith(PathToIgnore))
				{
					bSkip = true;
					continue;
				}
			}

			// If we are not skipping, we want to add this to our packaged output
			if (!bSkip)
			{
				string RelativeSourcePath = Path.GetRelativePath(PixelStreamingExtProgramsDirectory, DependencySource);
				RuntimeDependencies.Add(Path.Combine(WebServersOutputDirectory, RelativeSourcePath), DependencySource, StagedFileType.SystemNonUFS);
			}
		}
	}

	public PixelStreamingExt(ReadOnlyTargetRules Target) : base(Target)
	{
		PCHUsage = ModuleRules.PCHUsageMode.UseExplicitOrSharedPCHs;
		
		PublicIncludePaths.AddRange(
			new string[] {
				// ... add public include paths required here ...
			}
		);

		PrivateIncludePaths.AddRange(
			new string[] {
				// ... add other private include paths required here ...
			}
		);

		PublicDependencyModuleNames.AddRange(
			new string[]
			{
				"Core",
				"PixelCapture",
				"PixelStreaming",
				"PixelStreamingInput",
				"PixelStreamingOSC",
				// ... add other public dependencies that you statically link with here ...
			}
		);

		PrivateDependencyModuleNames.AddRange(
			new string[]
			{
				"ApplicationCore",
				"CinematicCamera",
				"Core",
				"CoreUObject",
				"Engine",
				"Slate",
				"SlateCore",
				"UMG",
				"Json",
				"JsonUtilities",
				"Networking",
				"RenderCore",
				"RHI",
				"RHICore",
				"OSC",
				// ... add private dependencies that you statically link with here ...	
			}
		);

		DynamicallyLoadedModuleNames.AddRange(
			new string[]
			{
				// ... add any modules that your module loads dynamically here ...
			}
		);

		// When we build a Game target we also package the servers with it as runtime dependencies
		if (Target.Type == TargetType.Game && Target.ProjectFile != null && IsExportWebServers())
		{
			StagingDirectory = GetStagingDirectory();
			System.Console.WriteLine($"StagingDirectory: {StagingDirectory}");
			if (StagingDirectory != null)
			{
				WebServersOutputDirectory = Path.Combine(StagingDirectory, "WebServers");
				System.Console.WriteLine($"WebServersOutputDirectory: {WebServersOutputDirectory}");

				if (Directory.Exists(WebServersOutputDirectory))
				{
					Directory.Delete(WebServersOutputDirectory, true);
				}

				string RunScriptDirectory = Path.Combine(StagingDirectory, "RunScript");
				if (Directory.Exists(RunScriptDirectory))
				{
					Directory.Delete(RunScriptDirectory, true);
				}

				string ReadMeFile = Path.Combine(StagingDirectory, "README.md");
				if (File.Exists(ReadMeFile))
				{
					File.Delete(ReadMeFile);
				}

				AddFolder("CloudRenderingJS");
				AddFolder("SignallingWebServer");
				AddFolder("SFU");

				RuntimeDependencies.Add(Path.Combine(WebServersOutputDirectory, "clear_node.bat"), "$(ProjectDir)/Plugins/PixelStreamingExtEditor/Resources/WebServers/clear_node.bat", StagedFileType.NonUFS);
				RuntimeDependencies.Add(Path.Combine(WebServersOutputDirectory, "run_local.bat"), "$(ProjectDir)/Plugins/PixelStreamingExtEditor/Resources/WebServers/run_local.bat", StagedFileType.NonUFS);
				RuntimeDependencies.Add(Path.Combine(WebServersOutputDirectory, "setup_node.bat"), "$(ProjectDir)/Plugins/PixelStreamingExtEditor/Resources/WebServers/setup_node.bat", StagedFileType.NonUFS);
				RuntimeDependencies.Add(Path.Combine(WebServersOutputDirectory, "setup_nodejs.bat"), "$(ProjectDir)/Plugins/PixelStreamingExtEditor/Resources/WebServers/setup_nodejs.bat", StagedFileType.NonUFS);

				RuntimeDependencies.Add(Path.Combine(RunScriptDirectory, "runApp.bat"), "$(ProjectDir)/Plugins/PixelStreamingExtEditor/Resources/RunScript/runApp.bat", StagedFileType.NonUFS);
				RuntimeDependencies.Add(Path.Combine(RunScriptDirectory, "runProcess.bat"), "$(ProjectDir)/Plugins/PixelStreamingExtEditor/Resources/RunScript/runProcess.bat", StagedFileType.NonUFS);
				RuntimeDependencies.Add(Path.Combine(RunScriptDirectory, "runSS_SFU.bat"), "$(ProjectDir)/Plugins/PixelStreamingExtEditor/Resources/RunScript/runSS_SFU.bat", StagedFileType.NonUFS);
				RuntimeDependencies.Add(ReadMeFile, "$(ProjectDir)/Plugins/PixelStreamingExtEditor/Resources/README.md", StagedFileType.NonUFS);
			}
		}
	}
}
